1. 관리자 폼 커스터마이징

    Question 모델을 admin.site.register(Question) 에 등록함으로써,
    Django 는 디폴트 폼 표현을 구성할 수 있었다.
    관리 폼이 보이고 작동하는 방법을 커스터마이징 하려는 경우가 있다.
    객체를 등록할 때 Django 에 원하는 옵션을 알려주면 커스터마이징 할 수 있다.

    수정 폼의 필드를 재정렬하여 작동하는 법을 살펴보자.

    polls/admin.py 를 열고, 다음과 같이 수정해보자.

    from django.contrib import admin
    from .models import Question


    class QuestionAdmin(admin.ModelAdmin):
        fields = ['pub_date', 'question_text']


    admin.site.register(Question, QuestionAdmin)

    모델의 관리자 옵션을 변경해야 할 때마다,
    모델 어드민 클래스를 만든 다음, admin.site.register() 에 두 번째 인수로 전달하면 된다.

    변경된 사항은 pub_date 가 먼저 나오고, 그 다음 question_text 가 뒤따르게 됐다는 점이다.

    수십 개의 필드가 있는 관리 폼의 경우에는 직관적인 순서를 선택하는 것이 좋다.
    수십 개의 필드가 있는 폼에 관해서는 폼을 fieldset 으로 분할하는 것이 좋다.

    class QuestionAdmin(admin.ModelAdmin):
        fieldsets = [
            (None,               {'fields': ['question_text']}),
            ('Date information', {'fields': ['pub_date']}),
        ]

    fieldsets 의 각 튜플의 첫 번째 요소는 fieldset 의 제목이다.


2. 관련된 객체 추가

    Choice 도 표시해보자.

    polls/admin.py 를 열고, 다음과 같이 수정하자.

    from django.contrib import admin

    from .models import Choice, Question
    # ...
    admin.site.register(Choice)

    http://localhost:8000/admin/ 에 접속하면,
    POLLS 카테고리에 Choices 탭이 생긴 것을 확인할 수 있다.

    Choices 탭을 누른 뒤, 오른쪽 상단에 ADD CHOICE 버튼을 누르면 새 Choice 객체를 추가할 수 있는 양식이 나오는데,
    이 양식에서 《Question》 필드는 데이터베이스의 모든 Question 들을 포함하는 select box 다.
    Django 는 ForeignKey 가 admin 에서 <select> 로 표현되어야 함을 알고 있다.

    또 《Question》 옆의 《Add Another》(+) 링크를 보면,
    ForeignKey 관계를 가진 모든 객체는 저 링크가 있다.
    《Add Another》 을 클릭하면, 《Add Question》 폼이 있는 팝업이 나타나고,
    해당 창에 Question 을 추가하고 저장하면 Django 는 Question 을 데이터베이스에 저장하고,
    동적으로 이를 현재 보고 있는 《Add Choice》 폼에 추가한다.

    그러나 Choice 객체를 시스템에 추가하는 방법으로는 비효율적이다.
    Question 객체를 생성할 때 여러 개의 Choices를 직접 추가할 수 있다면 더 좋을 것이다.

    Choice 모델에 대한 register() 호출을 제거하고, Question 등록 코드를 다음과 같이 수정해보자.

    from django.contrib import admin

    from .models import Choice, Question


    class ChoiceInline(admin.StackedInline):
        model = Choice
        extra = 3


    class QuestionAdmin(admin.ModelAdmin):
        fieldsets = [
            (None,               {'fields': ['question_text']}),
            ('Date information', {'fields': ['pub_date'], 'classes': ['collapse']}),
        ]
        inlines = [ChoiceInline]

    admin.site.register(Question, QuestionAdmin)

    위 코드는 Django 에게,
    《Choice 객체는 Question 관리자 페이지에서 편집된다. 기본으로 3가지 선택 항목을 제공함.》 라고 알려준다.

    StackedInline 대신에 TabularInline을 사용하면, 관련된 객체는 좀 더 조밀하고 테이블 기반 형식으로 표시된다.

    class ChoiceInline(admin.TabularInline):
        #...
1. 뷰

    뷰는 Django 어플리케이션이 일반적으로 특정 기능과 템플릿을 제공하는 웹페이지의 한 종류다.

    - 블로그
        1. Blog 홈페이지 - 가장 최근의 항목을 보여준다.
        2. 항목 <세부> 페이지 - 하나의 항목에 연결하는 영구적인 링크(permalink)를 제공한다.
        3. 연도별 축적 페이지 - 주어진 연도의 모든 월별 항목들을 표시한다.
        4. 월별 축적 페이지 - 주어진 월의 날짜별 항목들을 표시한다.
        5. 날짜별 축적 페이지 - 주어진 날짜의 모든 항목들을 표시한다.
        6. 댓글 기능 - 특정 항목의 댓글을 다룰 수 있는 기능

    - poll 어플리케이션
        1. 질문 <색인> 페이지 - 최근의 질문들을 표시한다.
        2. 질문 <세부> 페이지 - 질문 내용과, 투표할 수 있는 서식을 표시한다.
        3. 질문 <결과> 페이지 - 특정 질문에 대한 결과를 표시한다.
        4. 투표 기능 - 특정 질문에 대해 특정 선택을 할 수 있는 투표 기능을 제공한다.
    
    URL로 부터 뷰를 얻기 위해, Django 는 'URLconfs' 라는 것을 사용한다.
    URLconfs 는 URL 패턴을 뷰에 연결한다.


2. 뷰 추가하기

    polls/views.py 를 열고,
    HttpResponse 객체를 리턴해주는 detail, results, vote 뷰(함수)를 만든다.

    polls/urls.py 를 열고,
    방금 만들어준 뷰들을 인자로 하는 path 함수를
    urlpatterns 에 저장한다.


3. 뷰가 실제로 뭔가를 하도록 만들기

    각 뷰는,
    요청된 페이지의 내용이 담긴 HttpResponse 객체를 반환하거나,
    Http404 같은 예외를 발생하게 해야한다.

    뷰는 데이터베이스의 기록을 읽을 수도 있다.
    뷰는 Django 나 제 3자가 Python 으로 만든 템플릿 시스템을 사용할 수도 있다.
    뷰는 PDF 파일을 생성하거나, XML 을 출력하거나, 실시간으로 ZIP 파일을 만들 수 있다.
    뷰는 Python 의 어떤 라이브러리라도 사용할 수 있다.


    polls/views.py 를 열고,
    models.py 에서 Question 을 import 한 뒤,
    index 뷰를 다음과 같이 수정한다.

    def index(request):
        latest_question_list = Question.objects.order_by('-pub_date')[:5]
        output = ', '.join([q.question_text for q in latest_question_list])
        return HttpResponse(output)

    
    Python 코드와 디자인을 분리하도록 템플릿 시스템을 사용하자.

    polls/templates/polls/index.html 을 만들고,
    HTML 코드를 작성한다.

    polls/views.py 를 열고,
    방금 만든 템플릿을 사용하여 index 뷰를 업데이트 해보자.

    from django.http import HttpResponse
    from django.template import loader

    from .models import Question


    def index(request):
        latest_question_list = Question.objects.order_by('-pub_date')[:5]
        template = loader.get_template('polls/index.html')
        context = {
            'latest_question_list': latest_question_list,
        }
        return HttpResponse(template.render(context, request))

    polls/index.html 템플릿을 불러온 후, context 를 전달한다.


    - 지름길 render()

        HttpResponse 객체를 돌려주는 구문은 자주 쓰는 용법으로, 간단하게 사용할 수 있도록
        단축 기능(shortcuts)이 있다.
        
        from django.shortcuts import render

        from .models import Question


        def index(request):
            latest_question_list = Question.objects.order_by('-pub_date')[:5]
            context = {'latest_question_list': latest_question_list}
            return render(request, 'polls/index.html', context)
        
        다른 뷰에 method stub 가 없다면, 더 이상 HttpResponse 를 유지할 필요가 없다.


4. 404 에러 일으키기

    polls/views.py 를 열고,

    from django.http import Http404
    from django.shortcuts import render

    from .models import Question
    # ...
    def detail(request, question_id):
        try:
            question = Question.objects.get(pk=question_id)
        except Question.DoesNotExist:
            raise Http404("Question does not exist")
        return render(request, 'polls/detail.html', {'question': question})
    
    뷰는 요청된 질문의 ID 가 없을 경우 Http404 예외를 발생시킨다.

    polls/templates/polls/detail.html 을 만들고,

    {{ question }}

    확인해보자.


    - 지름길 get_object_or_404()

        만약 객체가 존재하지 않을 때 get() 을 사용하여 Http404 예외를 발생시키는 것은 자주 사용되는 용법으로,
        간단하게 사용할 수 있도록 shortcuts 을 제공한다.

        polls/views.py 를 열고,

        from django.shortcuts import get_object_or_404, render

        from .models import Question
        # ...
        def detail(request, question_id):
            question = get_object_or_404(Question, pk=question_id)
            return render(request, 'polls/detail.html', {'question': question})

        
        비슷한 함수로, get_list_or_404() 함수가 있다.
        get() 대신 filter() 를 쓴다는 것이 다르다.
        리스트가 비어있을 경우 Http404 예외를 발생시킨다.


5. 템플릿 시스템 사용하기

    polls/templates/polls/detail.html 을 열고,
    다음과 같이 수정하자.

    <h1>{{ question.question_text }}</h1>
    <ul>
    {% for choice in question.choice_set.all %}
        <li>{{ choice.choice_text }}</li>
    {% endfor %}
    </ul>

    
    템플릿 시스템은 변수의 속성에 접근하기 위해서 점-탐색(dot-lookup) 문법을 사용한다.
    {{ question.question_text }} 에서, question 객체에 대해
    1. 사전형으로 탐색한다.
    2. 실패한 경우, 속성값으로 탐색한다. (여기에서는 속성값에서 탐색이 완료된다.)
    3. 실패한 경우, 리스트의 인덱스 탐색을 시도한다.

    {% for choice in question.choice_set.all %} 에서,
    question.choice_set.all 은 question.choice_set.all() 코드로 해석된다.


6. 템플릿에서 하드코딩된 URL 제거하기

    polls/index.html 에서, 템플릿에 링크를 적으면,이 링크는 하드코딩되는 것이다.

    <li><a href="/polls/{{ question.id }}/">{{ question.question_text }}</a></li>

    이렇게 하면 URL 의 변동이 생겼을 때 바꾸는게 어려워진다.
    이전에 polls.urls.py 에서 path() 함수에서 인수의 name 을 정의 했으므로,
    {% url %} 템플릿 태그를 사용하여 url 설정에 정의된 특정한 URL 경로들의 의존성을 제거할 수 있다.

    <li><a href="{% url 'detail' question.id %}">{{ question.question_text }}</a></li>

    만약 뷰의 URL 을 바꾸고 싶다면, 이제 polls/urls.py 에서 바꾸면 된다. (specifics/)

    path('specifics/<int:question_id>/', views.detail, name='detail'),


7. URL 의 이름공간(namespace) 정하기

    지금까지는 polls 앱 하나만 가지고 진행했는데,
    실제 프로젝트에서는 여러개 앱을 사용할 수 있다.
    {% url %} 템플릿 태그를 사용할 때, 어떤 앱의 뷰에서 URL 을 생성하는지 알기 위해서는,
    URLconf 에 namespace 를 추가하는 것이다.

    polls/urls.py 를 열고, app_name 을 추가하여 namespace 를 설정할 수 있다.

    app_name = "polls"
    
    polls/index.html 를 열고,

    <a href="{% url 'detail' question.id %}">{{ question.question_text }}</a> 를,
    <a href="{% url 'polls:detail' question.id %}">{{ question.question_text }}</a> 로 수정한다.
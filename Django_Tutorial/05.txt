1. 테스트 자동화 소개

    - 테스트 자동화란?

        테스트는 다양한 수준에서 작동한다.

        일부 테스트는 작은 세부 사항에 적용될 수 있다. (특정 모델 메서드는 예상대로 값을 반환하는가?)
        또 다른 테스트는 소프트웨어의 전반적인 작동을 검사한다. (사이트에서 사용자 입력 시퀀스가 원하는 결과를 생성하는가?)

        이전에 shell 을 사용하여 메소드의 동작을 검사하거나, 어플리케이션을 실행하고 어떻게 작동하는지 확인하기 위해 데이터를 입력해서 테스트했던 것과 크게 다르지 않다.
    
     - 테스트를 만들어야 하는 이유

        테스트를 통해 시간을 절약 할 수 있다.

        특정 시점까지는 '제대로 작동하는지 확인'하는 것이 테스트로서 충분하다.
        더 정교한 어플리케이션에서는 구성 요소간에 수십개의 복잡한 상호 작용이 있을 수 있다.
        이러한 구성 요소를 변경했을 때, 프로그램의 동작에 예기치 않은 결과가 발생할 수 있다.
        문제를 찾아내기 위해 일일히 데이터를 집어 넣어 보는 것은 가능하겠지만, 시간이 굉장히 오래 걸릴 수 있다.

        이 수동 테스트 작업을 자동화하면 시간을 많이 아낄 수 있다.

    - 테스트는 문제르 그저 식별하는 것이 아니라 예방한다.

        테스트가 없다면, 어플리케이션의 목적 또는 의도된 동작이 다소 불투명할 수 있다.
        심지어 자신의 코드가 정확히 무엇을 하고 있는지 알아내려고 노력해야 될 수도 있다.

        테스트는 이 불투명함을 바꾼다. 내부에서 코드를 밝혀내고, 어떤 것이 잘못 될 때,
        그것이 잘못되었다는 것을 깨닫지 못했다고 할지라도, 잘못된 부분에 빛을 집중시킨다.

    - 테스트가 코드를 더 매력적으로 만든다.

        "Code without tests is broken by design." - Jacob Kaplan-Moss (Django's orginal developers)
        
        테스트 작성을 시작해야하는 또 다른 이유는 다른 개발자들이 당신의 소프트웨어를 사용하는 것을 진지하게 고려하기 전에 테스트 코드를 보고 싶어한다.
    
    - 테스트는 팀이 함께 일하는 것을 돕는다.

        복잡한 어플리케이션의 경우, 팀별로 유지 관리가 된다.
        테스트는 동료가 실수로 코드를 손상시키지 않는다는 것을 보증한다. (당신이 코드를 망가트리는 것도)




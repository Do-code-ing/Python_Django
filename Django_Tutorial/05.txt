1. 테스트 자동화 소개

    1. 테스트 자동화란?

        테스트는 다양한 수준에서 작동한다.

        일부 테스트는 작은 세부 사항에 적용될 수 있다. (특정 모델 메서드는 예상대로 값을 반환하는가?)
        또 다른 테스트는 소프트웨어의 전반적인 작동을 검사한다. (사이트에서 사용자 입력 시퀀스가 원하는 결과를 생성하는가?)

        이전에 shell 을 사용하여 메소드의 동작을 검사하거나, 어플리케이션을 실행하고 어떻게 작동하는지 확인하기 위해 데이터를 입력해서 테스트했던 것과 크게 다르지 않다.
    
    2. 테스트를 만들어야 하는 이유

        테스트를 통해 시간을 절약 할 수 있다.

        특정 시점까지는 '제대로 작동하는지 확인'하는 것이 테스트로서 충분하다.
        더 정교한 어플리케이션에서는 구성 요소간에 수십개의 복잡한 상호 작용이 있을 수 있다.
        이러한 구성 요소를 변경했을 때, 프로그램의 동작에 예기치 않은 결과가 발생할 수 있다.
        문제를 찾아내기 위해 일일히 데이터를 집어 넣어 보는 것은 가능하겠지만, 시간이 굉장히 오래 걸릴 수 있다.

        이 수동 테스트 작업을 자동화하면 시간을 많이 아낄 수 있다.

    3. 테스트는 문제르 그저 식별하는 것이 아니라 예방한다.

        테스트가 없다면, 어플리케이션의 목적 또는 의도된 동작이 다소 불투명할 수 있다.
        심지어 자신의 코드가 정확히 무엇을 하고 있는지 알아내려고 노력해야 될 수도 있다.

        테스트는 이 불투명함을 바꾼다. 내부에서 코드를 밝혀내고, 어떤 것이 잘못 될 때,
        그것이 잘못되었다는 것을 깨닫지 못했다고 할지라도, 잘못된 부분에 빛을 집중시킨다.

    4. 테스트가 코드를 더 매력적으로 만든다.

        "Code without tests is broken by design." - Jacob Kaplan-Moss (Django's orginal developers)
        
        테스트 작성을 시작해야하는 또 다른 이유는 다른 개발자들이 당신의 소프트웨어를 사용하는 것을 진지하게 고려하기 전에 테스트 코드를 보고 싶어한다.
    
    5. 테스트는 팀이 함께 일하는 것을 돕는다.

        복잡한 어플리케이션의 경우, 팀별로 유지 관리가 된다.
        테스트는 동료가 실수로 코드를 손상시키지 않는다는 것을 보증한다. (당신이 코드를 망가트리는 것도)


2. 기초 테스팅 전략

    일부 프로그래머들은 'test-driven development'라는 원칙을 따른다.
    그들은 실제로 코드를 작성하기 전에 테스트를 작성한다.
    이것은 직관적이지 않은 것처럼 보일 수 있지만 사실 대부부의 사람들이 흔히 하는 일과 비슷하다.
    문제를 설명한 다음 이를 해결하기 위한 코드를 생성한다.
    test-driven development 는 Python 테스트 케이스에서 문제를 공식화한다.

    테스트 작성이 너무 늦어서는 안된다.

    수천 줄의 코드를 작성해 놓았다면, 어느 것을 테스트해야 할 지 고르는 것도 쉽지 않다.
    그럴 때는 새로운 기능을 넣거나 버그를 수정하는 등, 코드를 변경할 일이 있을 때, 당신의 첫 테스트를 작성하는 것이 유익할 것이다.


3. 첫 번째 테스트 작성하기

    1. 버그 식별하기

        Question.was_published_recently() 메소드는 Question 의 pub_date 가 미래로 설정되어 있을 때도 True 를 반환한다.
        이것은 옳지 못하다.
        shell 을 사용해 미래의 날짜로 메소드를 실행해 버그를 확인해보자.

        $ python manage.py shell

        >>> import datetime
        >>> from django.utils import timezone
        >>> from polls.models import Question

        새 Question 객체를 만들고, pub_date 를 미래로 설정한 뒤 확인해보자.

        >>> future_question = Question(pub_date=timezone.now() + datetime.timedelta(days=30))   
        >>> future_question.was_published_recently()
        True

    2. 버그를 노출하는 테스트 만들기

        문제를 테스트하기 위해 shell 에서 방금 수행한 작업을 테스트 자동화해보자.

        polls/tests.py 를 열고 다음과 같이 작성해보자.

        from django.test import TestCase
        from django.utils import timezone
        from .models import Question
        import datetime


        class QuestionModelTests(TestCase):

            def test_was_published_recently_with_future_question(self):
                time = timezone.now() + datetime.timedelta(day=30)
                future_question = Question(pub_date=time)
                self.assertIs(future_question.was_published_recently(), False)
    
    3. 테스트 실행

        $ python manage.py test polls

        Creating test database for alias 'default'...                   # (3)
        System check identified no issues (0 silenced).
        F
        ======================================================================
        FAIL: test_was_published_recently_with_future_question (polls.tests.QuestionModelTests)     # (4, 5)
        ----------------------------------------------------------------------
        Traceback (most recent call last):
        File "C:\Users\pc\Desktop\Python\Python_Django\mysite\polls\tests.py", line 12, in test_was_published_recently_with_future_question
            self.assertIs(future_question.was_published_recently(), False)
        AssertionError: True is not False                                                           # (6)

        ----------------------------------------------------------------------
        Ran 1 test in 0.001s

        FAILED (failures=1)
        Destroying test database for alias 'default'...

        1. manage.py test polls 는 polls 어플리케이션에서 테스트를 찾는다.
        2. django.test.TestCase 클래스의 서브 클래스를 찾는다.
        3. 테스트 목적으로 특별한 데이터베으스를 만든다.
        4. 테스트 메소드 - 이름이 test 로 시작하는 것들을 찾는다.
        5. test_was_published_recently_with_future_question 에서 pub_date 필드가 30일 미래인 Question 인스턴스를 생성한다.
        6. assertIs() 메소드를 사용하여, False 가 반환되길 기대했으나 True 로 반환된 것을 확인했다.
    
    4. 버그 수정

        Question.was_published_recently() 는 pub_date 가 미래에 있다면 False 를 반환해야 한다.
        models.py 에서 날짜가 과거에 있을 때에만 True 를 반환하도록 메소드를 수정해보자.

        polls/models.py 를 열고 다음과 같이 수정하자.

        def was_published_recently(self):
            now = timezone.now()
            return now - datetime.timedelta(days=1) <= self.pub_date <= now
        
        다시 테스트를 실행해보자.

        Creating test database for alias 'default'...
        System check identified no issues (0 silenced).
        .
        ----------------------------------------------------------------------
        Ran 1 test in 0.001s

        OK
        Destroying test database for alias 'default'...

        코드에서 버그를 수정하고 테스트를 통과했다.
    

    5. 보다 포괄적인 테스트

        메소드 동작을 보다 포괄적으로 테스트하기 위해 동일한 클래스에 두 가지 테스트 메소드를 추가하자.

        polls/tests.py 를 열고, 다음과 같이 수정하자.

        def test_was_published_recently_with_old_question(self):            # 현재 시각보다 1일 이상된 질문에 대해 False 를 반환하는지
            time = timezone.now() - datetime.timedelta(days=1, seconds=1)
            old_question = Question(pub_date=time)
            self.assertIs(old_question.was_published_recently(), False)

        def test_was_published_recently_with_recent_question(self):         # 현재 시각과 1일 이상 차이나지 않는 질문에 대해 True 를 반환하는지
            time = timezone.now() - datetime.timedelta(hours=23, minutes=59, seconds=59)
            recent_question = Question(pub_date=time)
            self.assertIs(recent_question.was_published_recently(), True)


4. 뷰 테스트

    설문조사 어플리케이션은 상당히 대충대충 만들어졌다.
    pub_date 가 미래에 있는 질문의 경우, 그 시기가 오기 전에는 보이지 않아야 하고, 그 시기부터 질문이 게시되어야 한다.

    1. 뷰에 대한 테스트

        앞서 테스트를 먼저 작성하고, 코드를 수정했다.
        순서는 사실 중요하지 않다.

        이번에는 웹 브라우저를 통해 사용자가 경험하는대로 동작을 확인해보자.

        버그를 수정하기 전에 우리가 사용할 수 있는 도구를 살펴보자.

    2. 장고의 테스트 클라이언트

        Django 는 뷰 레벨에서 코드와 상호 작용하는 사용자를 시뮬레이트하기 위해 테스트 클라이언트 클래스 Client 를 제공한다.
        이 테스트 클라이언트를 tests.py, shell 에서 사용할 수 있다.

        shell 을 이용해서 해보자.
        shell 에 먼저 테스트 환경을 구성해보자.

        $ python manage.py shell

        >>> from django.test.utils import setup_test_environment
        >>> setup_test_environment()

        response.context 와 같은 response 의 추가적인 속성을 사용할 수 있도록,
        setup_test_environment() 를 사용하여 템플릿 렌더러를 설치한다.
        이 메소드는 테스트 데이터베이스를 셋업하지 않는다.
        그렇기 때문에 테스트는 현재 사용중인 데이터베이스 위에서 돌게된다.

        테스트 클라이언트 클래스를 import 해보자.
        (나중에는 test.py 에서는 django.test.TestCase 클래스에 같이 딸려 오는 클라이언트를 사용한다.)

        >>> from django.test import Client
        >>> client = Client()               # 사용할 클라이언트 인스턴스 생성

        이런 것들이 준비가 되었다면 클라이언트에게 일을하라고 시킬 수 있다.

        >>> response = client.get('/')      # '/' 에서 요청을 받는다. 그러나 404 가 기대된다.
        Not Found: /
        >>> response.status_code
        404

        >>> from django.urls import reverse     # 대신에 '/polls/' 에서 무언가를 찾아야 한다. 하드 코딩 대신에 reverse() 를 사용하자.
        >>> response = client.get(reverse('polls:index'))
        >>> response.status_code
        200
        >>> response.content
        b'\n    <ul>\n    \n        <li><a href="/polls/1/">What&#x27;s up?</a></li>\n    \n    </ul>\n\n'
        >>> response.context['latest_question_list']
        <QuerySet [<Question: What's up?>]>

    
    3. 뷰 개선시키기

        설문 조사 목록에 아직 게시되지 않은 설문 조사(pub_date 가 미래인)가 표시된다.
        수정하자.

        polls/views.py 를 열고, 다음과 같이 수정하자.

        from django.utils import timezone

        def get_queryset(self):
            return Question.objects.filter(pub_date__lte=timezone.now()).order_by('-pub_date')[:5]
        
        return 문의 코드는 timezone.now 보다 pub_date 가 작거나 같은 Question 을 포함하는 queryset 을 반환한다.
        그리고 5개까지만 반환한다.

    4. 새로운 뷰 테스트

        이제 runserver 를 실행하면 브라우저에 사이트가 적재되고,
        과거와 미래 날짜의 Question 들이 생성되고, 공개된 것들만 리스트에 나타나는 것을 확인함으로써
        예상대로 동작하는 것에 만족할 수 있다.

        앞으로 어던 변화를 일으키더라도 이러한 점에 영향을 끼치지 않도록
        shell 에 기초를 둔 테스트를 작성하자.

        from django.urls import reverse

        def create_question(question_text, days):
            # question 을 만드는 함수
            time = timezone.now() + datetime.timedelta(days=days)
            return Question.objects.create(question_text=question_text, pub_date=time)


        class QuestionModelTests(TestCase):

            def test_no_question(self):
                response = self.client.get(reverse("polls:index"))
                self.assertEqual(response.status_code, 200)
                self.assertContains(response, "No polls are available.")
                self.assertQuerysetEqual(response.context["latest_question_list"], [])

            def test_past_question(self):
                question = create_question(question_text="Past question.", days=-30)
                response = self.client.get(reverse("polls:index"))
                self.assertQuerysetEqual(
                    response.context["latest_question_list"],
                    [question],
                )

            def test_future_question(self):
                create_question(question_text="Future question.", days=30)
                response = self.client.get(reverse("polls:index"))
                self.assertContains(response, "No polls are available.")
                self.assertQuerysetEqual(response.context["latest_question_list"], [])

            def test_future_question_and_past_question(self):
                question = create_question(question_text="Past question.", days=-30)
                create_question(question_text="Future question.", days=30)
                response = self.client.get(reverse('polls:index'))
                self.assertQuerysetEqual(
                    response.context['latest_question_list'],
                    [question],
                )

            def test_two_past_questions(self):
                question1 = create_question(question_text="Past question 1.", days=-30)
                question2 = create_question(question_text="Past question 2.", days=-5)
                response = self.client.get(reverse('polls:index'))
                self.assertQuerysetEqual(
                    response.context['latest_question_list'],
                    [question2, question1],
                )

        - test_no_question
            1. 질문을 생성하지는 않지만 메세제 및 latest_question_list 가 비어있음을 확인한다.
            2. django.test.TestCase 클래스는 몇가지 추가적인 선언 메소드를 제공한다.
            3. assertContains() 와 assertQuerysetEqual() 등이 있다.

        - test_past_question
            1. pub_date 가 과거인 질문을 생성한다.
            2. 그 질문이 리스트에 나타나는지 확인한다.
        
        - test_future_question
            1. pub_date 가 미래인 질문을 생성한다.
            2. 데이터베이스는 각 테스트 메소드마다 재설정되므로 첫 번째 질문은 더 이상 존재하지 않으므로 다시 인덱스에 질문이 없어야 한다.
    
    5. DetailView 테스트 하기

        지금까지 만든 것은 잘 작동한다.
        그러나 미래의 설문 목록들은 목록에 나타나지는 않지만,
        사용자가 URL 을 알고 있거나, 추측하면 접근할 수 있다.
        그래서 DetailView 에 비슷한 제약 조건을 추가할 필요가 있다.

        polls/views.py 를 열고, 다음과 같이 수정한다.

        class DetailView(generic.DetailView):
            ...
            def get_queryset(self):
                return Question.objects.filter(pub_date__lte=timezone.now())
        
        그 다음, pub_date 가 과거인 질문이 표시될 수 있고,
        pub_date 가 미래인 Question 이 표시되지 않는 지 확인하기 위해 몇 가지 테스트틀 추가해야 한다.

        polls/tests.py 를 열고, 다음 코드를 추가한다.

        class QuestionDetailViewTests(TestCase):

            def test_future_question(self):
                # pub_date 가 미래인 Question 을 만들고,
                # detail view 에서 그 Question 에 접근하면 404 not found 를 발생시킨다.
                future_question = create_question(
                    question_text='Future question.', days=5)
                url = reverse('polls:detail', args=(future_question.id,))
                response = self.client.get(url)
                self.assertEqual(response.status_code, 404)

            def test_past_question(self):
                # pub_date 가 과거인 Question 을 만들고,
                # detail view 에서 그 Question 에 접근하면 그 Question 의 text 를 보여준다.
                past_question = create_question(
                    question_text='Past Question.', days=-5)
                url = reverse('polls:detail', args=(past_question.id,))
                response = self.client.get(url)
                self.assertContains(response, past_question.question_text)
        
        - test_future_question
            1. pub_date 가 미래인 Question 을 만든다.
            2. detail view 에서 그 Question 에 접근한다.
            3. 404 not found 를 발생시키고, 잘 발생했는지 확인한다.

        - test_past_question
            1. pub_date 가 과거인 Question 을 만든다.
            2. detail view 에서 그 Question 에 접근한다.
            3. 그 Question 의 text 를 보여주고, 잘 보여줬는지 확인한다.

    6. 더 많은 테스트를 위한 아이디어

        get_queryset 메소드를 ResultsView 에 추가하고, 그 뷰에 대한 새로운 테스트 클래스를 생성해야 한다.
        그것은 방금 만든 것과 매우 유사하다. (그리고 이 작업은 반복될 것이다.)

        테스트를 추가하면서 다른 방법으로 어플리케이션을 개선할 수도 있다.
        예를 들어, 'Choice' 가 없는 사이트에 'Question' 을 게시할 수 없어야 한다.
        그래서 뷰를 확인하고 그러한 Question 을 배제해야 할 것이다.

        일반 사용자가 아닌 로그인 한 관리자는 게시되지 않은 'Question' 을 볼 수 있어야 한다.
        소프트웨어를 추가하기 위해 필요한 무엇이든 테스트를 수반해야 한다.

        어느 순간엔 너무 많은 테스트 코드들을 보고 관리하기 힘들만큼 너무 비대해지는 것이 아닌가 생각이 들 수 있다.



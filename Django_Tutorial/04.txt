1. Write a minimal form

    polls/templates/polls/detail.html 을 열고,
    <form> 요소를 포함시켜보자.

    <form action="{% url "polls:vote" question.id %}" method="post">
    {% csrf_token %}
        <fieldset>
            <legend>
                <h1>{{ question.question_text }}</h1>
            </legend>
            {% if error_message %}
            <p>
                <strong>{{ error_message }}</strong>
            </p>
            {% endif %}
            {% for choice in question.choice_set.all %}
            <input type="radio" name="choice" id="choice{{ forloop.counter }}" value="{{ choice.id }}">
            <label for="choice{{ forloop.counter }}">{{ choice.choice_text }}</label>
            <br>
            {% endfor %}
        </fieldset>
    <input type="submit" value="Vote">
    </form>

    - csrf_token
        csrf 공격에 대한 방어를 위한 토큰
        POST 요청 시 csrf_token 에 대해 유효성을 검사하여 방어한다.
    
    - forloop.counter
        몇 번째 for-loop 인지, 1부터 시작한다.
    

    polls/views.py 를 열고, vote 함수를 제대로 구현해보자.

    from django.http import HttpResponse, HttpResponseRedirect
    from django.shortcuts import get_object_or_404, render
    from django.urls import reverse

    from .models import Choice, Question

    def vote(request, question_id):
        question = get_object_or_404(Question, pk=question_id)
        try:
            selected_choice = question.choice_set.get(pk=request.POST['choice'])    # detail.html 에서 POST 형식으로 보낸 choice.id 로 어느것을 골랐는지 특정한다.
        except (KeyError, Choice.DoesNotExist):                                     # 아무것도 고르지 않거나, 에러 발생시 예외 처리
            # Redisplay the question voting form.
            return render(request, 'polls/detail.html', {
                'question': question,
                'error_message': "You didn't select a choice.",
            })
        else:
            selected_choice.votes += 1      # 투표 수를 증가시키고,
            selected_choice.save()          # 저장한다.
            return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))

    - HttpResponseRedirect
        뒤로가기 버튼을 눌렀을 경우 데이터가 두 번 POST 되는 것을 막는다.

    - reverse
        URL 패턴의 변수 부분을 조합해서 해당 뷰를 가리킨다.
        위에서는 /polls/question.id/results 라는 문자열을 반환한다.
        추적한다는 의미에서 reverse 인듯 ?
    

    polls/views.py 를 열고, results 뷰를 수정하자.

    from django.shortcuts import get_object_or_404, render


    def results(request, question_id):
        question = get_object_or_404(Question, pk=question_id)
        return render(request, 'polls/results.html', {'question': question})

    polls/templates/polls/results.html 을 만들고,

    <h1>{{ question.question_text }}</h1>

    <ul>
    {% for choice in question.choice_set.all %}
        <li>{{ choice.choice_text }} -- {{ choice.votes }} vote{{ choice.votes|pluralize }}</li>    # pluralize 복수형으로 만들어준다. 1 vote => 2 votes
    {% endfor %}
    </ul>

    <a href="{% url 'polls:detail' question.id %}">Vote again?</a>


    이렇게 만든 vote 뷰에는 작은 문제가 있다.
    만약 두 명의 사용자가 정확하게 같은 시각에 투표를 하려고 시도할 경우, 값을 제대로 저장하지 못할 수 있다.
    이를 '경쟁 상태'라고 부른다.

    F() expressions 를 읽어보면,
    F 표현식을 사용하면, 단순히 Python 구문을 실행하는 것이 아니라,
    데이터베이스에 대한 작업을 설명하는 SQL 구문이라 기술되어 있으며,
    데이터베이스 필드를 증가시키거나 하는 명령을 데이터베이스에 지시하는 것이다.

    Avoiding race conditions using F() 를 읽어보면,
    F 표현식을 사용하여 '경쟁 조건'을 피할 수 있다는 점이다.
    다음과 같이 사용한다.

    from django.db.models import F

    abc.aaa = F("aaa") + 1
    abc.save()


2. 제너릭 뷰 사용하기: 적은 코드가 더 좋다.

    중복의 제거.

    기존의 detail, results 뷰는 매우 짧고 비슷하다.
    이러한 뷰는 URL 에 전달된 매개 변수에 따라 데이터를 가져오고 템플릿을 로드하고 렌더링된 템플릿을 리턴하는,
    웹 개발의 일반적인 경우이다.
    이런 일반적인 경우를 위해 '제너릭 뷰' 시스템이 있다.
    제너릭 뷰는 일반적인 패턴을 추상화하여 앱을 작성하기 위해 Python 코드를 작성하지 않아도 된다.

    1. URLconf 를 변환한다.
    2. 불필요한 오래된 뷰 중 일부를 삭제한다.
    3. Django 의 제너릭 뷰를 기반으로 새로운 뷰를 도입한다.

    - URLconf 수정
        polls/urls.py 를 열어 URLconf 를 수정한다.

        urlpatterns = [
            path("", views.IndexView.as_view(), name="index"),
            path("<int:pk>", views.DetailView.as_view(), name="detail"),
            path("<int:pk>/results/", views.ResultsView.as_view(), name="results"),
            path("<int:question_id>/vote/", views.vote, name="vote"),
        ]

    - views 수정

        class IndexView(generic.ListView):
            template_name = "polls/index.html"
            context_object_name = "latest_question_list"

            def get_queryset(self):
                return Question.objects.order_by("-pub_date")[:5]


        class DetailView(generic.DetailView):
            model = Question
            template_name = "polls/detail.html"


        class ResultsView(generic.DetailView):
            model = Question
            template_name = "polls/results.html"
    
        index, detail, results 뷰는 기존에 함수형이었는데, 클래스로 다시 만들어주고,
        generic.ListView, generic.DetailView 를 상속받는다.
        이 두가지 제너릭 뷰는 각각 <개체 목록 표시>, <특정 개체 유형에 대한 세부 정보 페이지 표시> 개념을 추상화한다.

        - generic.DetailView
            1. model 속성은 각 제너릭 뷰에 어떤 모델이 적용할 것인지를 정한다.
            2. URL 에서 캡쳐된 기본 키 값이 "pk" 라고 기대하기 때문에 제너릭 뷰를 위해 question_id 를 pk 로 변경한다.
            3. <app name>/<model name>_detail.html 템플릿을 사용한다. (polls/question_detail.html)
            4. template_name 속성은 Django 에서 자동 생성한 기본 템플릿 이름 대신에 특정 템플릿 이름을 사용하도록 알려주기 위해 사용한다.
            5. DetailView, ResultsView 가 같은 generic.DetailView 를 사용하지만 template_name 을 다르게 선언함으로 다른 모습을 갖게 한다.

        - generic.ListView
            1. generic.DetailView 와 마찬가지로, <app name>/<model name>_list.html 템플릿을 기본으로 사용한다.
            2. 이미 있는 polls/index.html 템플릿을 사용하기 위해 template_name 을 선언했다.
            3. generic.DetailView 의 경우, Question 을 model 로 선언하여 context 변수의 이름을 결정할 수 있으나,
            4. generic.ListView 의 경우 자동으로 생성된 context 변수는 question_list 이다.
            5. 이를 재정의하기 위해 'latest_question_list' 를 사용하도록 context_object_name 속성을 사용한다.
            
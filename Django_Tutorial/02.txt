1. 데이터베이스 설치

    mysite/settings.py 의 내용을 살펴보자.

    Python 에서 기본으로 제공되는 SQLite
    실제 프로젝트를 시작할 때에는, 나중에 데이터베이스 교체 이슈를 피하기 위해서라도
    PostgreSQL 같이 좀 더 확장성 있는 데이터베이스를 사용하는 것이 좋다.

    - TIME_ZONE: 어느 지역의 시간을 기준으로 할 것인가.
        UTC: default (to Asia/Seoul)
        USE_I18N = True # 번역 시스템
        USE_L10N = True # 지역화된 데이터 형식이 활성화 되는지, True 라면 현재 로케일 형식을 사용하여 숫자와 날짜를 표시한다.
        USE_TZ = True (to False) # 날짜 시간이 기본적으로 시간대를 인식할지, True 라면 aware (template, form 만 바뀜), False 라면 naive

    - INSTALLED_APPS: Django 인스턴스에서 활성화된 모든 Django 어플리케이션들의 이름이 담겨져 있다.
        django.contrib.admin – 관리용 사이트
        django.contrib.auth – 인증 시스템
        django.contrib.contenttypes – 컨텐츠 타입을 위한 프레임워크
        django.contrib.sessions – 세션 프레임워크
        django.contrib.messages – 메세징 프레임워크
        django.contrib.staticfiles – 정적 파일을 관리하는 프레임워크

        이러한 기본 어플리케이션들은 일반적인 경우에 사용하기 편리하도록 기본으로 제공된다.
        이러한 어플리케이션들 중 몇몇은 최소한 하나 이상의 데이터베이스 테이블을 사용하는데,
        그러기 위해서는 데이터베이스에서 테이블을 미리 만들 필요가 있다.
    
    python manage.py migrate

    migrate 명령어는 INSTALLED_APPS 설정을 살펴보고,
    mysite/settings.py 파일의 데이터베이스 설정과 앱과 함께 제공되는
    데이터베이스 마이그레이션에 따라 필요한 데이터베이스 테이블을 생성한다.


2. 모델 만들기

    모델이란, 데이터에 대한 정보의 확실한 단일 소스다. (저장중인 데이터의 필수 필드와 동작 포함)

    polls/models.py 에 models.Model 을 상속받는 class 를 선언한다.
    각 모델에는 여러 클래스 변수가 있으며, 각각은 모델의 데이터베이스 필드를 나타낸다.

    - CharField
        문자 필드를 표현한다.
    
    - DateTimeField
        날짜와 시간 필드를 표현한다.
    
    - ForeignKey
        각각의 Choice 가 Question 에 관계된다는 것을 Django 에게 알려준다.
        다대일 관계일 때 사용한다.
    
    각각의 Field 인스턴스의 이름인 question_texty, pub_data 는 기계가 읽기 좋은 형식의 데이터베이스 필드 이름이다.
    이 필드명을 Python 코드에서 사용할 수 있으며, 데이터베이스에서는 컬럼명으로 사용한다.
    
    몇몇의 Field 클래스들은 필수 인수가 필요하다. 예를 들어, CharField 의 경우 max_length 를 입력해 주어야 한다.

    
    - OnetoOneField
        일대일 관계일 때 사용한다.
    
    - ManyToManyField
        다대다 관계일 때 사용한다.


3. 모델의 활성화

    앱을 현재 프로젝트에 포함시키기 위해서는, 앱의 구성 클래스에 대한 참조를 INSTALLED_APPS 설정에 추가해야 한다.

    mysite/settings.py 를 열고,

    INSTALLED_APPS = [
        'polls.apps.PollsConfig',   # 추가
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]

    PollsConfig 클래스는 polls/apps.py 파일 내에 존재한다. 따라서 점으로 구분된 경로는 'polls.apps.PollsConfig' 가 된다.
    이 점으로 구분된 경로를 mysite/settings.py 파일을 편집하여 INSTALLED_APPS 설정에 추가한다.
    이제, Django 는 polls 앱이 포함된 것을 알게 된다.
    

    makemigrations 을 실행시킴으로서, 모델을 변경시킨 사실과 이 변경사항을 migration 으로 저장시키고 싶다는 것을 Django 에게 알려준다.

    $ manage.py makemigrations polls

    Migrations for 'polls':
        polls\migrations\0001_initial.py
            - Create model Question
            - Create model Choice


    migration 들을 실행시켜주고, 자동으로 데이터베이스 스키마(개요)를 관리해주는 migrate 명령어가 있다.

    $ python manage.py sqlmigrate polls 0001

    BEGIN;
    --
    -- Create model Question
    --
    CREATE TABLE "polls_question" (
        "id" serial NOT NULL PRIMARY KEY,
        "question_text" varchar(200) NOT NULL,
        "pub_date" timestamp with time zone NOT NULL
    );
    --
    -- Create model Choice
    --
    CREATE TABLE "polls_choice" (
        "id" serial NOT NULL PRIMARY KEY,
        "choice_text" varchar(200) NOT NULL,
        "votes" integer NOT NULL,
        "question_id" integer NOT NULL
    );
    ALTER TABLE "polls_choice"
    ADD CONSTRAINT "polls_choice_question_id_c5b4b260_fk_polls_question_id"
        FOREIGN KEY ("question_id")
        REFERENCES "polls_question" ("id")
        DEFERRABLE INITIALLY DEFERRED;
    CREATE INDEX "polls_choice_question_id_c5b4b260" ON "polls_choice" ("question_id");

    COMMIT;

    - 테이블의 이름
        앱의 이름과 모델의 이름이 조합되어 자동으로 생성된다. (ex. polls_choice)
        오버라이드하여 수정할 수 있다.
    
    - ID
        기본 키가 자동으로 추가된다.
        오버라이드하여 수정할 수 있다.
    
    - FOREIGN KEY
        관례에 따라 필드명에 "_id" 를 자동으로 추가한다.
        오버라이드하여 수정할 수 있다.
    
    
    migrate 를 실행시켜 데이터베이스에 모델과 관련된 테이블을 생성해보자.

    $ manage.py migrate

    Operations to perform:
        Apply all migrations: admin, auth, contenttypes, polls, sessions
    Running migrations:
        Applying polls.0001_initial... OK

    migrate 명령은 아직 적용되지 않은 마이그레이션을 모두 수집해 이를 실행하며
    이 과정을 통해 모델에서의 변경사항들과 데이터베이스의 스키마의 동기화가 이루어진다.

    마이그레이션은 기능이 매우 강력하여, 마치 프로젝트를 개발할 때처럼 데이터베이스나 테이블에 손대지 않고도
    모델의 반복적인 변경을 가능하게 해준다. 동작 중인 데이터베이스를 자료 손실 없이 업그레이드 하는 데 최적화 되어 있다.


    - 정리
        1. models.py 에서 모델을 변경한다.
        2. $ python manage.py makemigrations 을 통해 변경사항에 대한 마이그레이션을 만든다.
        3. $ python manage.py migrate 명령을 통해 변경사항을 데이터베이스에 적용한다.


4. API 가지고 놀기

    Python 쉘을 실행하자.

    $ python manage.py shell

    단순히 $ python 이 아니라 manage.py 를 통해 shell 을 부르는 이유는,
    manage.py 가 DJANGO_SETTINGS_MODULE 환경 변수를 설정하여 Django 에게 mysite/settings.py 파일에 대한
    Python import path 를 제공하기 때문이다.

    >>> from polls.models import Choice, Question   # 아까 작성한 모델을 불러온다.
    >>> Question.objects.all()                      # 시스템에 있는 Question 모델의 인스턴스 객체를 확인한다.
    <QuerySet []>

    >>> from django.utils import timezone           # 시간 정보를 주기 위해 호출
    >>> q = Question(question_text="What's new?", pub_date=timezone.now())  # 새 Question 객체를 만든다.
    >>> q.save()                                    # 데이터베이스에 그 객체를 저장한다.

    >>> q.id            # id 확인
    1

    >>> q.question_text # question_text 확인
    "What's new?"
    >>> q.pub_date      # pub_date 확인
    datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=<UTC>)

    >>> q.question_text = "What's up?"  # 수정하고
    >>> q.save()                        # 다시 저장한다.

    >>> Question.objects.all()          # 마지막으로 확인해본다.
    <QuerySet [<Question: Question object (1)>]>


    그런데 여기서 <Question: Question object (1)> 는 객체를 표현하는 데 별로 도움이 되지 않는다.
    __str__() 메소드를 추가해보자.
    __str__() 메소드를 추가하는 것은 객체의 표현을 대화식 프롬프트에서 편하게 보려는 이유 말고도,
    Django 가 자동으로 생성하는 관리 사이트 에서도 객체의 표현이 사용되기 때문이다.

    모델에 커스텀 메소드도 추가해보자.
    Question 클래스에서 다음과 같은 메소드를 추가하자.

    def was_published_recently(self):
        return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
    
    변경사항을 저장하고, 다시 shell 을 실행해보자.

    >>> from polls.models import Choice, Question
    >>> Question.objects.all()
    <QuerySet [<Question: What's up?>]>     # __str__ 이 잘 작동한다.

    >>> Question.objects.filter(id=1)       # filter 함수를 통해 원하는 데이터를 확인할 수 있다.
    <QuerySet [<Question: What's up?>]>
    >>> Question.objects.filter(question_text__startswith='What')
    <QuerySet [<Question: What's up?>]>

    >>> Question.objects.get(pk=1)          # pk: primary key, Question.objects.get(id=1) 과 동일하게 작동한다.
    <Question: What's up?>

    >>> q = Question.objects.get(pk=1)
    >>> q.was_published_recently()
    True                                    # 새로 만들어준 메소드 또한 잘 작동한다.

    >>> q.choice_set.all()                  # ForeignKey 로 Question 에 각각의 Choice 들을 연결해줄 수 있는 set 을 확인할 수 있다.
    <QuerySet []>

    >>> q.choice_set.create(choice_text='Not much', votes=0)    # Choice 객체를 만들 수 있다.
    <Choice: Not much>
    >>> q.choice_set.create(choice_text='The sky', votes=0)
    <Choice: The sky>

    >>> c = q.choice_set.create(choice_text='Just hacking again', votes=0)
    >>> c.question
    <Question: What's up?>                          # Choice 객체의 question 이 무엇인지 확인할 수 있다.

    >>> q.choice_set.all()
    <QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
    >>> q.choice_set.count()
    3

    >>> c = q.choice_set.filter(choice_text__startswith='Just hacking')
    >>> c.delete()


    - filter()
        FROM abc WHERE here = "here"
    
    - exclude()
        FROM abc WHERE NOT here = "here"
    

        - __exact       # 확실한 일치
            abc.objects.get(id__exact=14)
            abc.objects.get(id=14)          # exact 생략
        
        - __iexact      # 대소문자를 구분하지 않는 일치
            abc.objects.get(name__iexact="John")    # john 이나 JOHN 과도 매치된다.

        - __contains    # 내용을 포함하고 있는지
            abc.objects.get(name__contains="J")     # John, James 등과 매치된다.
        
        - __startswith, __endswith
            찾으려는 내용의 시작 혹은 끝과 일치


5. Django 관리자 소개

    모델에 대한 관리용 인터페이스를 자동 생성하여 관리를 도와준다.

    1. 관리자 생성하기

        $ python manage.py createsuperuser

        Username, Email address, Password, Password(again) 을 입력한다.
    
    2. 개발 서버 시작

        $ python manage.py runserver

        http://127.0.0.1:8000/admin 으로 접속한다.
    
    3. 관리자 사이트 들어가기

        아까 생성한 슈퍼유저(superuser) 계정으로 로그인한다.

    4. 관리 사이트에서 poll app 을 변경가능하도록 만들기

        polls/admin.py 를 열고 다음 코드를 추가한다.

        from .models import Question

        admin.site.register(Question)
    
    5. 자유로운 관리 기능을 탐색하기

        Question 을 등록했으니, Django 가 이를 알아채고 관리 페이지에 표시한다.
        내용을 확인해본다.
1. 재사용의 중요성

    웹 어플리케이션을 설계, 빌드, 테스트, 유지하는 것은 큰일이다.
    PyPI(Python Package Index) 에는 Python 프로그램에서 사용할 수 있는 광범위한 패키지가 있다.
    우리가 만든 앱을 다른 사람들이 재사용할 수 있게 패키징해보자.


2. 프로젝트와 재사용가능한 앱

    mysite/
        manage.py
        mysite/
            __init__.py
            settings.py
            urls.py
            asgi.py
            wsgi.py
        polls/
            __init__.py
            admin.py
            apps.py
            migrations/
                __init__.py
                0001_initial.py
            models.py
            static/
                polls/
                    images/
                        background.gif
                    style.css
            templates/
                polls/
                    detail.html
                    index.html
                    results.html
            tests.py
            urls.py
            views.py
        templates/
            admin/
                base_site.html
    
    프로젝트와 polls 어플리케이션은 분리가 명확하게 되어있다.
    polls 어플리케이션의 모든 부분들은 polls 디렉토리에 있다.
    polls 디렉토리를 바로 재사용할 수 있다는 뜻이다.
    다른 사람들이 쉽게 사용할 수 있도록 앱을 패키징하자.


3. 필수 구성 요소 설치

    파이썬 패키징의 현주소는 다양한 도구들로 인해 약간 혼란스럽다.
    이번에 패키지를 빌드하는 데에는 setuptools 를 사용하자.
    권장 패키징 도구(distribute 포크와 병합된)이다.


4. 앱 패키징 하기

    1. 먼저, Django 프로젝트 외부에 polls 의 상위 디렉토리를 만들자.

        - 앱 이름 짓기
            패키지 이름을 지을 때, 기존 패키지들과 충돌을 피하기 위해 PyPI 같은 리소들을 점검해야한다.
            배포할 패키지를 생성할 때, 모듈 이름 앞에 'django-' 를 앞에 붙이는 것이 좋다.
            이러면 Django 앱을 찾는 다른 사용자가 우리의 앱을 Django 고유 앱으로 인식하는데 도움이 된다.
    
    2. django-polls 디렉토리의 polls 디렉토리로 이동하자.

    3. 다음과 같은 내용으로 django-polls/README.rst 를 생성하자.

        =====
        Polls
        =====

        Polls is a Django app to conduct Web-based polls. For each question,
        visitors can choose between a fixed number of answers.

        Detailed documentation is in the "docs" directory.

        Quick start
        -----------

        1. Add "polls" to your INSTALLED_APPS setting like this::

            INSTALLED_APPS = [
                ...
                'polls',
            ]

        2. Include the polls URLconf in your project urls.py like this::

            path('polls/', include('polls.urls')),

        3. Run ``python manage.py migrate`` to create the polls models.

        4. Start the development server and visit http://127.0.0.1:8000/admin/
        to create a poll (you'll need the Admin app enabled).

        5. Visit http://127.0.0.1:8000/polls/ to participate in the poll.
    
    4. django-polls/LICENSE 파일을 생성하자.
        라이선스 없이 공개된 코드는 '쓸모없음'을 의미한다는 것을 기억하자.
        Django 와 많은 Django 호환 앱들은 BSD 라이선스로 배포되고 있다.
        라이선스 선택은 누군가 나의 코드를 사용하는데 영향을 미칠 수 있다는 사실을 알고 있으면 된다.

    5. 다음으로, 앱 빌드 및 설치 방법을 자세히 설명하는 setup.cfg 및 setup.py 파일을 생성한다.
        참고: setuptools 문서 https://setuptools.pypa.io/en/latest/

        django-polls/setup.cfg 를 만들고, 다음과 같이 작성한다.

        [metadata]
        name = django-polls
        version = 0.1
        description = A Django app to conduct Web-based polls.
        long_description = file: README.rst
        url = https://www.example.com/
        author = Your Name
        author_email = yourname@example.com
        license = BSD-3-Clause  # Example license
        classifiers =
            Environment :: Web Environment
            Framework :: Django
            Framework :: Django :: X.Y  # Replace "X.Y" as appropriate
            Intended Audience :: Developers
            License :: OSI Approved :: BSD License
            Operating System :: OS Independent
            Programming Language :: Python
            Programming Language :: Python :: 3
            Programming Language :: Python :: 3 :: Only
            Programming Language :: Python :: 3.6
            Programming Language :: Python :: 3.7
            Programming Language :: Python :: 3.8
            Topic :: Internet :: WWW/HTTP
            Topic :: Internet :: WWW/HTTP :: Dynamic Content

        [options]
        include_package_data = true
        packages = find:
        python_requires = >=3.6
        install_requires =
            Django >= X.Y  # Replace "X.Y" as appropriate
        
        django-polls/setup.py 를 만들고, 다음과 같이 작성한다.

        from setuptools import setup

        setup()
    
    6. 기본적으로 Python 모듈과 패키지만 패키지에 포함된다.
        추가 파일을 포함하려면 MANIFEST.in 파일을 만들어야 한다.
        자세한 설명은 setuptools 문서를 참고하자.
        템플릿, README.rst, LICENSE 파일을 포함하려면,

        django-polls/MANIFEST.in 을 만들고, 다음과 같이 작성한다.

        include LICENSE
        include README.rst
        recursive-include polls/static *
        recursive-include polls/templates *
    
    7. 선택사항이지만, 자세한 문서를 포함시키는 것을 추천한다.
        장래를 위해 django-polls/docs 라는 빈 디렉토리를 생성한다.
        django-polls/MANIFEST.in 에 다음 한줄을 추가하자.

        recursive-include docs *

        파일을 추가하지 않으면 docs 디렉토리는 패키지에 포함되지 않을 것이다.
        많은 Django 앱들은 https://readthedocs.org/ 같은 사이트를 통해 온라인 문서를 제공한다.

    8. python setup.py sdist 로 패키지를 빌드해보자. (django-polls 내에서 실행)
        이 명령은 dist 디렉토리를 생성하고, 새 패키지 django-polls-0.1tar.gz 를 빌드한다.
    
    더 자세한 정보는 Python 의 프로젝트 패키징 및 배포에 관한 튜토리얼 https://packaging.python.org/distributing/ 을 참조하자.


5. 여러분의 패키지 사용하기

    우리가 polls 디렉토리를 프로젝트 바깥으로 이동시켰으므로, 작동하지 않는다.
    우리의 새 django-polls 패키지를 설치하여 이 문제를 해결하자.

    - 유저 라이브러리 설치하기
        다음 단계는 django-polls 를 사용자 라이브러리로 설치한다.
        사용자 단위 설치는 관리자 권한 접근이 안되는 시스템뿐만 아니라,
        시스템 서비스나 다른 사용자들의 영향으로부터 패키지를 보호하는 것 같은 이점이 많다.

    1. pip 를 이용하여 패키지를 설치한다.

        $ python -m pip install --user django-polls/dist/django-polls-0.1.tar.gz
    
    2. 운이 따라준다면, Django 프로젝트는 이제 잘 작동할 것이다. 서버를 실행해 확인해보자.

    3. pip 를 사용해 패키지를 삭제
        
        $ python -m pip uninstall django-polls

